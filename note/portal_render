
t_list	*chain_wall(sector)
	t_list		chain_wall;

	while (wall)
		
		insert_link(wall) 
		if (status(wall) == PORTAL)
			chain_sector(wall.link)


t_list	*chain_sector(sector_root)
	t_list		*chain_sector;
	t_list		*new_link;

	//list chaine de list chaine
	//le premier element de la liste est le plus proche
	while (sub_sector)
	{
		new_link = chain_wall(sub_sector[i]);
		insert_node(chain_sector, new_link);
		i++;
	}
	chain_wall(sector_root);


t_list *scene_model_info(sector_actuel)
	//calcul toutes les distances, angle etc..
	//determine au fur et a mesure la chaine de rendu
	premiere condition
		//sous secteur --> sous secteur de sous secteur
		//secteur
		//scene_model_info(sub_sector)
	seconde condition
		//plus proche


chaine de rendu:
	ou stocker les information de comparaison dans la structure mur ?
	
	malloc pour tout les modele, modele et mur, ou pas de malloc ?
	un tableau si on le depasse on remalloc



frame:
	zbuffer bzero
	choix_modele -> sous secteur le plus proche
	
		zline buffer bzero
		choix_du_mur -> le plus proche
			rendu sol
			rendu plafond
			si status(wall) == WALL
				rendu (mur) entier (h_floor -> h_ceil)
			si status(wall) == PORTAL || WINDOW
				rendu (intersection) (h_floor -> sub_sector->h_floor)
				rendu (intersection) (h_ceil -> sub_sector->h_ceil)
				recursivite du rendu de secteur avec une fenetre plus petite
					//adapter le rendu pour une fenetre qui n'est pas carre
					//2 t_fvct3 x,y , hauteur (gauche et droite)
				si status(wall) == WINDOW
					rendu transparence (wall) entier
		prochain dans le tableau
	
rendu	:
	pour chaque rendu on determine un rectangle
	//rendu sol/plafond/mur/objs/enemis
	//2*fvct3 4*fvct2 (haut/bas g/droite)
	rendu par ligne
		
separation du rendu :
	formation des portions
	interpolation billineaire
	rendu par ligne(2 * t_fvct3)

affichage portal :
	preaffichage du portail (les liaison avec le portail) si le prochain secteur est plus grand)
	recursivite avec une limite de fenetre (2 * t_fvct3)
		-buncherisation etc...
	

perte de calcul
	-le pire cas du zbuffer est de commencer par la fin

determiner les sous secteur du plus proche au plus loingtain

-faire une chaine de rendu des modeles
-faire une chaine de rendu des mur par modele
	parcourir les sous secteur
-simuler un ecran et un fov plus petit
	tout en ayant les parametre de base de la camera
-mettre en place zbuffer pour les plafond et les enemis ?
-devision des textures

